#include		"cryptopp700/rsa.h"
#include 		"cryptopp700/base64.h"
#include		"cryptopp700/base32.h"
#include		"cryptopp700/osrng.h"
#include		"cryptopp700/files.h"
#include		"cryptopp700/hex.h"
#include		"cryptopp700/pssr.h"
#include		"cryptopp700/whrlpool.h"
#include		<string>
#include		<iostream>
#include 		<assert.h>

#ifndef __crypto_util__
#define __crypto_util__

using namespace std;

string enc_from_bin(string binary);
string bin_from_enc(string encoded);

namespace crypto{

#define KEY_SIZE 				256
#define KEY_BLOCK_START 		"==KEY_BLOCK_START=="
#define PUBLIC_BLOCK_END 		"==PUBLIC_BLOCK_END=="
#define PRIVATE_BLOCK_END 		"==PRIVATE_BLOCK_END=="

using Signer 	= CryptoPP::RSASS<CryptoPP::PSSR, CryptoPP::Whirlpool>::Signer;
using Verifier 	= CryptoPP::RSASS<CryptoPP::PSSR, CryptoPP::Whirlpool>::Verifier;

void write_key_to_string(const CryptoPP::RSA::PrivateKey pv_key, string &pv_key_str);
void write_key_to_string(const CryptoPP::RSA::PublicKey pb_Key, string &pb_key_str);
void read_key_from_string(CryptoPP::RSA::PrivateKey &pv_key, const string pv_key_str);
void read_key_from_string(CryptoPP::RSA::PublicKey &pb_key, const string pb_key_str);
void create_key_pair(string &pubKeyBuffer, string &privKeyBuffer);
void hash_transaction(string data, string &digest);
string sign_data(string hash, string priv_key);
bool verify_signature(string signed_hash, string hash, string public_key);



/*
 * Writes a private key to a string. Overloaded for writing public keys
 * Key string unencoded
 */
void write_key_to_string(const CryptoPP::RSA::PrivateKey pv_key, string &pv_key_str){
	pv_key_str = "";
	CryptoPP::StringSink ss(pv_key_str);
	pv_key.DEREncode(ss);
	ss.MessageEnd();
}
/*
 * Writes a public key to a string. 
 * Key string unencoded
 */
void write_key_to_string(const CryptoPP::RSA::PublicKey pb_key, string &pb_key_str)
{
	pb_key_str = "";
	CryptoPP::StringSink ss(pb_key_str);
	pb_key.DEREncode(ss);
	ss.MessageEnd();
}

/*
 * Reads a private key from string. Overloaded for reading public keys
 * Key string unencoded
 */
void read_key_from_string(CryptoPP::RSA::PrivateKey &pv_key, const string pv_key_str)
{

	CryptoPP::StringSource ss(pv_key_str, true);
	pv_key.BERDecode(ss);
}
/*
 * Reads a public key from string.
 * Key string unencoded
 */
void read_key_from_string(CryptoPP::RSA::PublicKey &pb_key, const string pb_key_str)
{
	//CryptoPP::StringSource ss(pb_key_str, true);
	CryptoPP::StringSource ss(pb_key_str, true);
	pb_key.BERDecode(ss);
}

/*
 * Signs the supplied data with the supplied private key
 * Returns the signed hash
 */
string sign_data(string data, string priv_key){
	CryptoPP::RSA::PrivateKey private_key;
	read_key_from_string(private_key, priv_key);
	string signature = "";
	CryptoPP::AutoSeededRandomPool rng;
	CryptoPP::Integer m((const CryptoPP::byte *)data.data(), data.size());
	CryptoPP::Integer c = private_key.CalculateInverse(rng, m);

	size_t req = c.MinEncodedSize();
	signature.resize(req);
	c.Encode((CryptoPP::byte *) &signature[0], signature.size());
	
	return signature;
}

/*
 * Returns true if the supplied signed data is the signed version of the supplied data given the supplied public key
 * Treats all data as unencoded text
 */
bool verify_signature(string signature, string data, string public_key_string){
	CryptoPP::RSA::PublicKey public_key;
	read_key_from_string(public_key, public_key_string);
	string test;

	CryptoPP::Integer m((const CryptoPP::byte *)signature.data(), signature.size());
	CryptoPP::Integer c = public_key.ApplyFunction(m);
	size_t req = c.MinEncodedSize();
	test.resize(req);
	c.Encode((CryptoPP::byte *) &test[0], test.size());
	cout << "unsigned signature: " << enc_from_bin(test) << endl;
	if (test.compare(data) == 0){
		return true;
	} else {
		return false;
	}
}

/*
 * Hashes the supplied data that constitutes a transaction.
 */
void hash_transaction(string data, string &digest)
{
	digest = "";
	CryptoPP::SHA256 hash;
	CryptoPP::StringSource ss(data, true, 
		new CryptoPP::HashFilter(hash, 
			new CryptoPP::StringSink(digest)));
}


/*
 * Creates a keypair based on the defined KEY_SIZE
 */
void generate_key_pair(string &pv_key_string, string &pb_key_string){
	CryptoPP::RSA::PrivateKey pv_key;
	CryptoPP::AutoSeededRandomPool rng;

	pv_key.GenerateRandomWithKeySize(rng, KEY_SIZE);

	CryptoPP::RSA::PublicKey public_key(pv_key);

	write_key_to_string(pv_key, pv_key_string);
	write_key_to_string(public_key, pb_key_string);
}


/*
 * Loads a keypair from the file into the supplied strings.
 * If the file only contains a public key then only the public key is loaded. 
 * TODO Allow just public keys to be loaded.
 */
bool load_key_pair(string &pv_key_str, string &pb_key_str, const string file){
	ifstream fs(file);
	string pb_key_str_enc = "";
	string pv_key_str_enc = "";;
	pv_key_str = "";
	pb_key_str = "";

	string input;
	fs >> input;

	if (!(input.compare(KEY_BLOCK_START) == 0)){
		return false;
	}
	
	fs >> input;
	pb_key_str_enc = input;

	fs >> input;
	if (!(input.compare(PUBLIC_BLOCK_END) == 0)){
		return false;
	}
	fs >> input;
	pv_key_str_enc = input;
	fs >> input;


	if (!(input.compare(PRIVATE_BLOCK_END) == 0)){
		return false;
	}


	pv_key_str = bin_from_enc(pv_key_str_enc);
	pb_key_str = bin_from_enc(pb_key_str_enc);
	return true;
}



void save_key_pair(const string pv_key_str, const string pb_key_str, string file){
	ofstream fs(file);

	fs << KEY_BLOCK_START << endl;

	string pb_key_str_enc, pv_key_str_enc;
	pv_key_str_enc = enc_from_bin(pv_key_str);
	pb_key_str_enc = enc_from_bin(pb_key_str);
	fs << pb_key_str_enc << endl << PUBLIC_BLOCK_END << endl;
	fs << pv_key_str_enc << endl << PRIVATE_BLOCK_END << endl;
}
}
/*
 * Get a base32 encoded string from a binary string
 */
string enc_from_bin(string binary){
	string encoded;
	CryptoPP::StringSource ss(binary, true,
		new CryptoPP::Base32Encoder(
			new CryptoPP::StringSink(encoded)));
	return encoded;
}
/*
 * Get a binary string from a base32 encoded string
 */
string bin_from_enc(string encoded){
	string binary;
	CryptoPP::StringSource ss(encoded, true,
		new CryptoPP::Base32Decoder(
			new CryptoPP::StringSink(binary)));
	return binary;
}

#endif