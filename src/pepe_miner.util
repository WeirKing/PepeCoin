/**
 * Title: pepe_miner.util
 * Author: Kixo
 * Purpose: utility functions for the pepe miner
 * Date: 4/1/2018
 */

#include "pepe_miner.h"               /* Header information for pepe_miner */

/*
 * Sends a message to the specified connected client known as a buddy, defined by the supplied socket connector
 * TODO: NONE
 */
int send_message(MESSAGE *message, int sockfd){
    int send_error;
    send_error = send(sockfd, message, MESSAGE_LENGTH, 0);
    if (send_error == -1){
        cout << "There was an error sending the message to socket " << sockfd << endl;
        return 1;
    }
    return 0;
}

/*
 * Broadcasts a message to all actively connected clients, known as buddies.
 * 
 * TODO: NONE
 */
int broadcast_message(MESSAGE *message){
    int i, sockfd;
    for (i = 0; i < connected_clients.size(); i++){
        sockfd = connected_clients[i];
        send_message(message, sockfd);
    }
    return 0;
}
/*
 * Handle a message from a client 
 * Current functionality is merely echoing the message to the standard output
 * 
 * TODO: Change the handling of received messages to the correct functionality
 * Message handling can be treated as different 1023 byte data based on the header
 */
int handle_incoming_message(int client_index){
    MESSAGE message;
    int amount_read;
    amount_read = read(connected_clients[client_index], &message, MESSAGE_LENGTH);
    if (amount_read == 0){                                //Handle client disconnect
        close(connected_clients[client_index]);
        connected_clients.erase(connected_clients.begin() + client_index);
        return 0;
    }
    cout << message.info;
    return 0;
}

/*
 * Initializes listening connection so other buddies may connect
 * Also attempts to create a connection with the currently known active buddies.
 * 
   RETURN: integer identifier reporting success
 * TODO: create connection with currently known buddies
 */
int initialize_connection(){
    if ((welcome_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0){
        quit_error("There was a problem initializing the welcome socket\n");
    }

    struct sockaddr_in server_address;
    server_address.sin_family       = AF_INET;
    server_address.sin_addr.s_addr  = htonl(INADDR_ANY);            //Any incoming interface
    server_address.sin_port         = htons(WELCOME_PORT);

    if (bind(welcome_socket, (struct sockaddr *) &server_address, sizeof(server_address)) < 0){
        quit_error("There was a problem binding the welcome socket\n");
    }
    if (listen(welcome_socket, 128) < 0){
        quit_error("The welcome socket is unable to listen\n");
    }
    //The welcome_socket is now fully functional and able to accept incoming requests to the local ip address and welcome port
    return 0;
}

/*
 * Connect to the buddy designated by the particular ip address and port

 * RETURN: the integer of the socket
 * TODO: None
 */
int connect_to_client(char *ip, int port){
    int client_socket;
    struct sockaddr_in new_client_address;

    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0){
        quit_error("There was a problem initializing the new client socket\n");
    }

    new_client_address.sin_family   = AF_INET;
    new_client_address.sin_port     = htons(port);
    inet_pton(AF_INET, ip, &new_client_address.sin_addr);

    cout << connect(client_socket, (struct sockaddr *) &new_client_address, sizeof(new_client_address)) << endl;
    //client_socket is now an active socket with the specified client

    return client_socket;
}